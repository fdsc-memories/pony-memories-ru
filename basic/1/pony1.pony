// Файл может быть в кодировке UTF-8, но без BOM в начале файла


// Имена классов с большой буквы. Имена функций, параметров - с маленькой.
// Главный актор (активный объект) - именно с его конструктора начинается выполнение программы
// Это главная нить приложения, по сути
actor Main
	// конструктор может называться по-разному
	// Конструктор актора - это основное тело его потока
	new create(env: Env) =>
		// Здесь идёт тело метода, оно всегда с отступом
		env.out.print("Wombat will created")

		// Вызываем конструктор Wombat
		let defaultWombat = Wombat("Fantastibat")
		// Вызываем конструктор hungry
		let hungryWombat  = Wombat.hungry("Nomsbat", 12)

		// let - это неизменяемая переменная
		// var - это изменяемая переменная

	// behavior - это поведение актора, декларируется словом be
	// Вызывается асинхронно для пользователя, но синхронно исполняется в акторе
	// Может менять объекты-акторы, даже если те переданы по неизменяемой ссылке
	// Поэтому be не нужно сопровождать словом ref
	// Поведение исполняется в той же очерёдности, что и вызывалось
	be behavior(a: U64) =>
		let b = a


// Конструктор по умолчанию сгенерируется сам, если не объявлено иных конструкторов
// В таком случае вызов конструктора будет без скобок: просто "Class1", а не "Class1()"
class Class1
	let constant: U64 = 1


class Wombat
	// Сначала идут поля, потом методы.
	// В перемешку нельзя, т.к. поля тогда попадут в тела методов
	let name: String

	// Приватное поле начинается с подчёркивания
	var _hunger_level: U64 = 0

	// Инициализатор вызывает конструктор по умолчанию
	let cl: Class1 = Class1

// Это конструктор по умолчанию
// Все конструкторы должны установить неустановленные по умолчанию поля
new create(name': String) =>
    name = name'

// Конструкторы могут называться как угодно (с маленькой буквы)
// Все имена параметров с маленькой буквы
// Затенения переменных нет, то есть нельзя объявить name как параметр,
// если в классе уже есть name как поле
// но можно добавлять ' к похожим именам
new hungry(name': String, hunger': U64) =>
    name = name'
    _hunger_level = hunger'


// Функция func1 устанавливает новый уровень _hunger_level
// и возвращает значение типа U64, равное предыдущему _hunger_level

// Слово ref является указанием на то, что объект в этом методе будет изменяться

// Оператор a = b = a обменяет значениями переменные a и b местами,
// т.к. возвращает старое значение, а не только что установленное
fun ref func1(hunger': U64): U64 =>
	_hunger_level = hunger'

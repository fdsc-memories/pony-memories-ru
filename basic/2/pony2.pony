use "format"

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è

actor Main
	new create(env: Env) =>

		// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–∏–ø None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–º–µ—Å—Ç–æ null
		// var x: (String | None)

		// type DoorState is (OpenedDoor | ClosedDoor)

		// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
		let doorState : DoorState = ClosedDoor

		let isDoorOpen : Bool =
		match doorState
		  | OpenedDoor => true
		  | ClosedDoor => false
		end

		// –ú–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—Ç–æ–º, –ø–æ—Å–ª–µ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏, –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç let
		// –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä —Å–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
		var i: U8
		i = 2

		// –ù–∞ –∫–æ–Ω—Å–æ–ª–∏ —Ä—É—Å—Å–∫–∏–π –±—É–¥–µ—Ç –∫—Ä–∞–∫–æ–∑—è–±—Ä–æ–π
		env.out.print("–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞ (Door opened): " + isDoorOpen.string())

		// –°—Ç—Ä–æ–∫–æ–≤—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞ –∫–∞–∫ –µ—Å—Ç—å, –≤ —Ç–æ–π –∂–µ –∫–æ–¥–∏—Ä–æ–≤–∫–µ, —á—Ç–æ –∏ —Ñ–∞–π–ª
		let pony = "üêé"
		let pony_hex_escaped = "p\xF6n\xFF"
		let pony_unicode_escape = "\U01F40E"
		let pony2 = "\uF09F\u908E"

		env.out.print(pony + " | " + pony_hex_escaped + " | " + pony_unicode_escape + " | " + pony2)
		for b in pony.values() do
		  env.out.print(Format.int[U8](b, FormatHex))
		end

		// –°—Ç—Ä–æ–∫–∏ –º–æ–≥—É—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –≤ –∫–∞–≤—ã—á–∫–∞—Ö " –∏–ª–∏ —Ç—Ä–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö """
		// –í—Å–µ —Å—Ç—Ä–æ–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–º–∏
		env.out.print(	// –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–∫–æ–±–∫—É –ø—Ä–∏–¥—ë—Ç—Å—è –¥–µ–ª–∞—Ç—å –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ
		"0
		1
		2
		3
		4
		"
		// –ê–∫–∫—É—Ä–∞—Ç–Ω–µ–Ω—å–∫–æ —Å–º–æ—Ç—Ä–∏–º: 0 –±—É–¥–µ—Ç –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∑–∞–∏–º—Å—Ç–≤—É—é—Ç –æ—Ç—Å—Ç—É–ø –∫–æ–¥–∞
		)

		// –ó–¥–µ—Å—å –æ—Ç—Å—Ç—É–ø –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç. 0 - —ç—Ç–æ –Ω—É–ª–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
		env.out.print(
		"""
		0
		1
		2
		3
		4
		"""
		)

		// –û–±—ä—è–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –º–∞—Å—Å–∏–≤
		// –û–ø–µ—Ä–∞—Ç–æ—Ä ";" —Ä–∞–∑–¥–µ–ª—è–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
		let my_literal_array =
		[
			"first"; "second"
			"third one on a new line"
		]

		for b in my_literal_array.values() do
		  env.out.print(b)
		end
		/* –í—ã–≤–æ–¥:
			first
			second
			third one on a new line
		*/

		// –ì–µ—Ç–µ—Ä–æ–≥–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ Array[(U64|String)] ref
		// –≠—Ç–æ—Ç –º–∞—Å—Å–∏–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏ —Å—Ç—Ä–æ–∫–∏, –∏ —á–∏—Å–ª–∞
		let my_heterogenous_array = 
		[
			U64(42)
			"42"
			U64.min_value()
		]

		// –≠—Ç–æ –≥–æ–º–æ–≥–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (—Å–º. –Ω–∏–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ)
		let my_Stringable_array: Array[Stringable] ref = 
		[
			U64(42)
			"42"
			U64.min_value()
		]
		
		// –≠—Ç–æ —Ç–æ –∂–µ
		let my_Stringable_array2 = 
		[ as Stringable:
			U64(42)
			"42"
			U64.min_value()
		]

		for b in my_heterogenous_array.values() do
		  env.out.print(b.string())
		end
		/* –í—ã–≤–æ–¥:
			42
			42
			0
		*/

		for b in my_Stringable_array.values() do
		  env.out.print(b.string())
		end

		env.out.print("-------------------------------")

		// –ó–¥–µ—Å—å –º—ã –±–µ—Ä—ë–º —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ apply –∑–Ω–∞—á–µ–Ω–∏—è ColourList.apply()
		for colour in ColourList().values() do
			// colour - —ç—Ç–æ –æ–¥–∏–Ω –∏–∑ —Ç–∏–ø–æ–≤ —Ü–≤–µ—Ç–æ–≤
			// colour() == colour.apply()
			env.out.print(colour().string())
		end

		// –ö–æ—Ä—Ç–µ–∂–∏ (tuples)
		var x: (String, U64)
		x = ("hi",  3)
		x = ("bye", 7)
		(var y, var z) = x
		var x1 = x._1
		var x2 = x._2

		// Number - —Å–º. –Ω–∏–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —ç—Ç–æ –≤—Å–µ —á–∏—Å–ª–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã
		// –ß—Ç–æ–±—ã –ø—Ä–∏—Ä–∞–≤–Ω—è—Ç—å –∫ aa –∫–∞–∫–æ–µ-—Ç–æ —á–∏—Å–ª–æ –Ω–∞–ø—Ä—è–º—É—é, –ø—Ä–∏–¥—ë—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —É–∫–∞–∑–∞—Ç—å –µ–≥–æ —Ç–∏–ø
		// –ò–Ω–∞—á–µ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞ –æ—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ Multiple possible types for literal
		let aa: Number = U64(0)

		var a = Aliases
		a.getAliases(env)

		let ca = ComplexValue(1, 5, env)
		let cb = ComplexValue(2, 7, env)

		// –û–ø–µ—Ä–∞—Ç–æ—Ä "+" —è–≤–ª—è–µ—Ç—Å—è –∞–ª–∏–∞—Å–æ–º —Ñ—É–Ω–∫—Ü–∏–∏ add(...), —Å–º. –Ω–∏–∂–µ
		env.out.print((ca + cb).string())
		
		env.out.print("----------------------------------")

		// –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –æ—à–∏–±–∫–∏
		var x10  = U32.max_value() + 1
		if ((U32.max_value() + 1) == x10) then
			// U32.max_value() + 1 == x10 is true
			// –ù–∏–∫–∞–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –æ–Ω –Ω–µ –¥–µ–ª–∞–µ—Ç, —Ö–æ—Ç—è –≤ —Å–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–∏—Å–∞–Ω–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç
			env.out.print("U32.max_value() + 1 == x10 is true")	// –≠—Ç–æ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ
		end

		env.out.print("U32.max_value() + 1: " + x10.string())  // 0
		
		x10 = U32.max_value() +~ U32(1) // –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–µ–º –∂–µ, —á—Ç–æ –∏ –±—ã–ª–æ —Ä–∞–Ω–µ–µ: –ø–æ—Ö–æ–∂–µ –Ω–∞ –æ—à–∏–±–∫—É –≤ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–µ, –ø—Ä–∏—á—ë–º –æ–Ω–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
		env.out.print("U32.max_value() +~ 1: " + x10.string())  // 4294967295

		var null: U32 = 0
		x10 = x10 / null
		env.out.print("x10 / 0: " + x10.string())  // —Ç–æ–∂–µ 0
		env.out.print("10 % 6: " + U32(10 %  6).string())  // 4
		var x128: I8 = -128
		x128 = -x128
		env.out.print("-(-128): " + x128.string())  // -128

		// Partial and Checked Arithmetic
		let x10e = 
		try
			U32.max_value() +? U32(1)
		else
			env.out.print("error with adding") 
		end

		env.out.print("U32.max_value() +? U32(1): " + x10e.string())  // None

		// https://tutorial.ponylang.io/expressions/arithmetic.html#unsafe-conversion
		// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç

		let x12 = I32(12).f32()
		env.out.print("I32(12).f32(): " + x12.string())  // 12
		let x13 = U32(1) / U32(3)
		env.out.print("1 / 3: " + x13.string())  // 0
		
		x10 = U32.max_value() - U32(1)
		x10 = x10 + 3	// += - –∑–¥–µ—Å—å —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç
		env.out.print("U32.max_value() - U32(1) + 3: " + x10.string())  // 1 - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ –Ω–∞ –æ–±–æ–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö + –∏ +~, —Ç.–∫. –∏ —Ç–∞–º, –∏ —Ç–∞–º –¥–∞—ë—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
		
		// "is" –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–µ–π (—Ç–æ –µ—Å—Ç—å —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫)
		// None - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç (—Å–∏–Ω–≥–ª—Ç–æ–Ω), —Ç–∞–∫ —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
		let xNone = None
		if xNone is None then
			None
		end

		// fun eq(that: box->Foo): Bool
		// –ë—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω ComplexValue.eq –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ ==, –∏ ComplexValue.ne –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ !=
		// –ü—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø—Ä–∏–º–∏—Ç–∏–≤—ã —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º "is", —Ç.–∫. –æ–Ω–∏ - —Å–∏–Ω–≥–ª—Ç–æ–Ω—ã
		if ca != cb then
			None
		else
			None
		end


// –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π —Ç–∏–ø - –Ω–µ –∏–º–µ–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –ø–æ–ª–µ–π
primitive OpenedDoor
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –ª—é–±—ã—Ö –∞–∫—Ç–æ—Ä–æ–≤
	// –í—Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã (—Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤) –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
	fun _init() =>
		// –ó–¥–µ—Å—å –µ—â—ë –Ω–µ—Ç env, —Ç–∞–∫ —á—Ç–æ —Ç–∞–∫ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è. –ê env.out –≤–æ–æ–±—â–µ –∞–∫—Ç–æ—Ä
		// env.out.print("OpenedDoor init")
		let a: U8 = 2

	fun _final() =>
		let b: U8 = 1

	// –ü—Ä–∏–º–∏—Ç–∏–≤ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏
	// –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–Ω–∏ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç
	fun getValue(): U8 =>
		1

// –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π —Ç–∏–ø –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Ç –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫–∏–º - –±–µ–∑ –Ω–∏—á–µ–≥–æ
primitive ClosedDoor

// –≠—Ç–æ —Ç–∏–ø-–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ (–æ–Ω –∂–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ - –æ–¥–∏–Ω –∏–∑ —Ç–∏–ø–æ–≤),
// DoorState —è–≤–ª—è–µ—Ç—Å—è –∞–ª–∏–∞—Å–æ–º –¥–ª—è —Ç–∏–ø–∞-–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è (OpenedDoor | ClosedDoor)
type DoorState is (OpenedDoor | ClosedDoor)


trait Named
	fun name(): String => "Bob"

// –§—É–Ω–∫—Ü–∏—è hair —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
// –§—É–Ω–∫—Ü–∏—è height –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –∫–ª–∞—Å—Å–µ, —Ä–µ–∞–ª–∏–∑—É—é—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫
trait Bald
	fun hair(): Bool => false
	fun height(): F32

// –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞–∂–µ–π (–æ–±–∞ —Ç–∏–ø–∞–∂–∞ —Ä–µ–∞–ª–∏–∑—É—é—Ç—Å—è –∫–ª–∞—Å—Å–æ–º Bob)
// –ö–ª–∞—Å—Å –∑–∞–∏–º—Å—Ç–≤—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
class Bob is (Named & Bald)
	// –ó–¥–µ—Å—å –∫–ª–∞—Å—Å –≤—ã–Ω—É–∂–¥–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é height –∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–∞ Bald
	fun height(): F32 =>
		0.0


primitive Red    fun apply(): U32 => 0xFF0000FF
primitive Green  fun apply(): U32 => 0x00FF00FF
primitive Blue   fun apply(): U32 => 0x0000FFFF

type Colour is (Red | Blue | Green)

primitive ColourList
  fun apply(): Array[Colour] =>
    [Red; Green; Blue]


// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —É—Ç–∏–Ω—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é (structural typing)
// –¢–æ –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏–∑ —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
interface HasName
	fun name(): String

/*
–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–µ —Ç–∏–ø—ã

Bool. This is a 1-bit value that is either true or false.
ISize, ILong, I8, I16, I32, I64, I128. Signed integers of various widths.
USize, ULong, U8, U16, U32, U64, U128. Unsigned integers of various widths.
F32, F64. Floating point numbers of various widths.

–¢–∏–ø—ã Size –∏ Long —è–≤–ª—è—é—Ç—Å—è —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏, —Ä–∞–∑–º–µ—Ä –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

let my_explicit_unsigned: U32 = 42_000
let my_constructor_unsigned = U8(1)
let my_constructor_float = F64(1.234)

let my_decimal_int: I32 = 1024
let my_hexadecimal_int: I32 = 0x400
let my_binary_int: I32 = 0b10000000000

–í–æ—Å—å–º–∏—Ä–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª –∑–¥–µ—Å—å –Ω–µ—Ç

let my_double_precision_float: F64 = 0.009999999776482582092285156250
let my_scientific_float: F32 = 42.12e-4

let big_a: U8 = 'A'                 // 65
let hex_escaped_big_a: U8 = '\x41'  // 65
let newline: U32 = '\n'             // 10

–≠–∫—Ä–∞–Ω–∏—Ä—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
\x4F hex escape sequence with 2 hex digits (up to 0xFF)
\a, \b, \e, \f, \n, \r, \t, \v, \\, \0, \'

let multiByte: U64 = 'ABCD' // 0x41424344


–°—Ç—Ä–æ–∫–∏

\u00FE unicode escape sequence with 4 hex digits encoding one code point
\U10FFFE unicode escape sequence with 6 hex digits encoding one code point
\x4F hex escape sequence for unicode letters with 2 hex digits (up to 0xFF)
\a, \b, \e, \f, \n, \r, \t, \v, \\, \0, \"


type Number is (Signed | Unsigned | Float)

type Signed is (I8 | I16 | I32 | I64 | I128)

type Unsigned is (U8 | U16 | U32 | U64 | U128)

type Float is (F32 | F64)

*/


// –°—Ç—Ä—É–∫—Ç—É—Ä—ã - —ç—Ç–æ –∫–ª–∞—Å—Å—ã –¥–ª—è FFI
struct Inner
	var x: I32 = 0

// –í –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –ø–æ–ª–µ–π –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
struct Outer
	// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Inner –±—É–¥–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é, –ø—Ä—è–º–æ –≤ —Ç–µ–ª–æ, –±–µ–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
	// –í—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Å—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	embed inner_embed: Inner = Inner

	// –≠—Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±—É–¥–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ, –∞ –≤ –ø–æ–ª–µ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –µ—ë –∞–¥—Ä–µ—Å
	// –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å–≤–æ–µ–Ω–æ
	// –ª–∏–±–æ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ, –ª–∏–±–æ –≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–µ –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, var —ç—Ç–æ –∏–ª–∏ let
	// –ü—Ä–∏—á—ë–º –∏–º–µ–Ω–Ω–æ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ, –∞ –Ω–µ –≤ –º–µ—Ç–æ–¥–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
	var inner_var: Inner = Inner
	let  x: U64 = 1
	// –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ. protected –ø–æ–ª–µ–π –Ω–µ—Ç, —Ç.–∫. –Ω–µ—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
	let _y: U64 = 1


class A

type AAlias1 is A

class Aliases

	fun getAliases(env: Env) =>
		env.out.print("Aliases")
		var a = A
		var b: AAlias1 iso = AAlias1

		//  c: Array[A iso!]
		// –ù–∞—Å—á—ë—Ç "!" https://tutorial.ponylang.io/expressions/literals.html —Å–º. –≤ –∫–æ–Ω—Ü–µ
		// https://tutorial.ponylang.io/reference-capabilities/aliasing.html —Ç–æ–∂–µ –≤ –∫–æ–Ω—Ü–µ
		// –ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç–∏–ø—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫ A iso —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è reference capabilites
		// –ü–æ—Ç–æ–º—É —á—Ç–æ –µ—Å–ª–∏ —É–±—Ä–∞—Ç—å "!", —Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è "a" –±—É–¥–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞
		// (–æ–Ω–∞ –±—É–¥–µ—Ç —Ç–∏–ø–∞ A ref)
		// –ö–∞–∫ –≤–∏–¥–Ω–æ, –∞–ª–∏–∞—Å—ã, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ type, —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ —Å–ø–æ–∫–æ–π–Ω–æ –∑–∞—Ö–æ–¥—è—Ç –≤ —Ç–∞–∫–æ–π –º–∞—Å—Å–∏–≤
		var c: Array[A iso!] = 
		[
			a
			b
		]

		// c.push(c)	// –≠—Ç–æ –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–∏–ø
		
struct ComplexValue
	let real: F64
	let img : F64
	let env : Env

	fun eq(e: ComplexValue): Bool =>

		env.out.print("ComplexValue.eq")

		if real != e.real then
			return false
		end

		img == e.img

	fun ne(e: ComplexValue): Bool =>
		not eq(e)

	new create(real': F64, img': F64, env': Env) =>
		real = real'
		img  = img'
		env  = env'

	// –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä "+", –æ–Ω –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
	fun add(x: ComplexValue): ComplexValue =>
		ComplexValue(real + x.real, img + x.img, env)

	fun string(): String =>
		let s: String = "(" + real.string() + ", " + img.string() + ")"
		s

/*
–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ and –∏ or –¥–∞—ë—Ç –ø–æ–ª–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π if (x and y) –∏ if (x or y)
–¢–æ –µ—Å—Ç—å —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –±—É–ª–µ–≤—Å–∫–∏—Ö —Ç–∏–ø–æ–≤
*/

/*
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å–º. https://tutorial.ponylang.io/expressions/ops.html
–†–∞–∑–¥–µ–ª Precedence

–û–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞ –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø–æ–ª—é —è–≤–ª—è—é—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º–∏

–£–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ø–µ—Ä–µ–¥ –±–∏–Ω–∞—Ä–Ω—ã–º–∏ not a == b  <==>  (not a) == b

–ò–Ω—Ñ–∏–∫—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
1 + 2 * 3  // Compilation failed.
1 + (2 * 3)  // 7

–¢–æ –µ—Å—Ç—å –Ω—É–∂–Ω–æ —è–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–æ–±–∫–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏ —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Ä–∞–∑–Ω—ã—Ö –∏–Ω—Ñ–∏–∫—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∏–Ω–∞—á–µ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞

1 + 2 * -3  // Compilation failed.
1 + (2 * -3)  // -5

–†–∞–±–æ—Ç–∞–µ—Ç:
1 + -(2 * -3)  // 7
*/

// https://tutorial.ponylang.io/expressions/ops.html
/*
The full list of unary operators that are aliases for functions is:

Operator	Method	Description
-	neg()	Arithmetic negation
not	op_not()	Not, both bitwise and logical
-~	neg_unsafe()	Unsafe arithmetic negation


The full list of infix operators that are aliases for functions is:

Operator	Method	Description	Note
+	add()	Addition	
-	sub()	Subtraction	
*	mul()	Multiplication	
/	div()	Division	
%	rem()	Remainder	
%%	mod()	Modulo	Starting with version 0.26.1
<<	shl()	Left bit shift	
>>	shr()	Right bit shift	
and	op_and()	And, both bitwise and logical	
or	op_or()	Or, both bitwise and logical	
xor	op_xor()	Xor, both bitwise and logical	
==	eq()	Equality	
!=	ne()	Non-equality	
<	lt()	Less than	
<=	le()	Less than or equal	
>=	ge()	Greater than or equal	
>	gt()	Greater than	
>~	gt_unsafe()	Unsafe greater than	
+~	add_unsafe()	Unsafe Addition	
-~	sub_unsafe()	Unsafe Subtraction	
*~	mul_unsafe()	Unsafe Multiplication	
/~	div_unsafe()	Unsafe Division	
%~	rem_unsafe()	Unsafe Remainder	
%%~	mod_unsafe()	Unsafe Modulo	Starting with version 0.26.1
<<~	shl_unsafe()	Unsafe left bit shift	
>>~	shr_unsafe()	Unsafe right bit shift	
==~	eq_unsafe()	Unsafe equality	
!=~	ne_unsafe()	Unsafe non-equality	
<~	lt_unsafe()	Unsafe less than	
<=~	le_unsafe()	Unsafe less than or equal	
>=~	ge_unsafe()	Unsafe greater than or equal	
+?	add_partial()?	Partial Addition	
-?	sub_partial()?	Partial Subtraction	
*?	mul_partial()?	Partial Multiplication	
/?	div_partial()?	Partial Division	
%?	rem_partial()?	Partial Remainder	
%%?	mod_partial()?	Partial Modulo	Starting with version 0.26.1
*/